class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n=0;
        if(m!=0)
        {
            n = matrix[0].size();
        }
        else
        {
            return {};
        }
        int i=0;
        int up=0;
        int down=m-1;
        int left=0;
        int right=n-1;
        vector<int> res(m*n);
        while(i<=m*n-1)
        {
            for(int col=left;col<=right;++col)
            {
                res[i]=matrix[up][col];
                i++;
            }
            if(++up>down) break;
            for(int row=up;row<=down;++row)
            {
                res[i]=matrix[row][right];
                i++;
            }
            if(--right<left) break;
            for(int col=right;col>=left;--col)
            {
                res[i]=matrix[down][col];
                i++;
            }
            if(--down<up) break;;
            for(int row=down;row>=up;--row)
            {
                res[i]=matrix[row][left];
                i++;
            }
            if(++left>right) break;
        }
        return res;
    }
};
这个解法很有意思，建立两个矩阵，{m,n}
每次移动到头，移动步数就是m（左右移动）或者n（上下移动），下次移动就是m-1（n-1）
vector<int> spiralOrder(vector<vector<int>>& matrix) {
    vector<vector<int> > dirs{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    vector<int> res;
    int nr = matrix.size();     if (nr == 0) return res;
    int nc = matrix[0].size();  if (nc == 0) return res;
    
    vector<int> nSteps{nc, nr-1};
    
    int iDir = 0;   // index of direction.
    int ir = 0, ic = -1;    // initial position
    while (nSteps[iDir%2]) {
        for (int i = 0; i < nSteps[iDir%2]; ++i) {
            ir += dirs[iDir][0]; ic += dirs[iDir][1];  //当前元素的位置，设置巧妙
            res.push_back(matrix[ir][ic]);
        }
        nSteps[iDir%2]--;
        iDir = (iDir + 1) % 4;
    }
    return res;
}




class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty()) return {};
        int m = matrix.size(), n = matrix[0].size();
        vector<int> spiral(m * n);
        int u = 0, d = m - 1, l = 0, r = n - 1, k = 0;
        while (true) {
            // up
            for (int col = l; col <= r; col++) spiral[k++] = matrix[u][col];
            if (++u > d) break;
            // right
            for (int row = u; row <= d; row++) spiral[k++] = matrix[row][r];
            if (--r < l) break;
            // down
            for (int col = r; col >= l; col--) spiral[k++] = matrix[d][col];
            if (--d < u) break;
            // left
            for (int row = d; row >= u; row--) spiral[k++] = matrix[row][l];
            if (++l > r) break;
        }
        return spiral;
    }
};
