n 个数字有 n！种全排列，每种数字开头的全排列有 (n - 1)!（n！/ n）种。 
所以用 k / (n - 1)! 就可以得到第 k 个全排列是以第几个数字开头的。 
用 k % (n - 1)! 就可以得到第 k 个全排列是某个数字开头的全排列中的第几个。 
这又变成了最初的问题设置。 
对于以某个数字开头的全排列（第一个数字固定后的全排列，不再理会第一个数字），它有 (n - 1)! 种全排列，
那么这些全排列中，每个数字开头的全排列有 (n - 2)! （(n-1)! / (n-1)）。 


erase函数的原型如下：
（1）string& erase ( size_t pos = 0, size_t n = npos );
（2）iterator erase ( iterator position );
（3）iterator erase ( iterator first, iterator last );
也就是说有三种用法：
（1）erase(pos,n); 删除从pos开始的n个字符，比如erase(0,1)就是删除第一个字符
（2）erase(position);删除position处的一个字符(position是个string类型的迭代器)
（3）erase(first,last);删除从first到last之间的字符（first和last都是迭代器）

iota(begin,end,val)
template <class ForwardIterator, class T>
  void iota (ForwardIterator first, ForwardIterator last, T val)
{
  while (first!=last) {
    *first = val;
    ++first;
    ++val;
  }
}


class Solution {
public:
    string getPermutation(int n, int k) {
        string res;
        string dict(n,'0');
        for(int i=1;i<=n;++i)
        {
            dict[i-1]+=i;
        }
        int pTable[10] = {1};
        for(int i = 1; i <= 9; i++)
        {
            pTable[i] = i * pTable[i - 1];
        }
        while(n>0)
        {
            int tem=(k-1)/pTable[n-1];         //序号从0开始
            res+=dict[tem];
            dict.erase(dict.begin()+tem);
            k=k-tem*pTable[n-1];
            n--;
        }
        return res;
    }
};



class Solution {
public:
    string getPermutation(int n, int k) {
        // initialize a dictionary that stores 1, 2, ..., n. This string will store the permutation.
        string dict(n, 0);
        iota(dict.begin(), dict.end(), '1');
        
        // build up a look-up table, which stores (n-1)!, (n-2)!, ..., 1!, 0!
        vector<int> fract(n, 1);
        for (int idx = n - 3; idx >= 0; --idx) {
            fract[idx] = fract[idx + 1] * (n - 1 - idx);
        }
        
        // let k be zero base
        --k;
        
        // the main part.
        string ret(n, 0);
        for (int idx = 0; idx < n; ++idx) {
            int select = k / fract[idx];
            k %= fract[idx];
            ret[idx] = dict[select];
            dict.erase(next(dict.begin(), select)); // note that it is an O(n) operation
        }
        return ret;
    }
};
