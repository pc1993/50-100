DP解法
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n1=s1.size();
        int n2=s2.size();
        int m=s3.size();
        if((n1+n2)!=m)
            return false;
        vector<vector<bool>> res(n1+1,vector<bool>(n2+1,0));
        res[0][0]=true;
        for(int i=1;i<=n1;i++)
            res[i][0]=res[i-1][0]&&(s1[i-1]==s3[i-1]);
        for(int j=1;j<=n2;j++)
            res[0][j]=res[0][j-1]&&(s2[j-1]==s3[j-1]);
        for(int i=1;i<=n1;++i)
        {
            for(int j=1;j<=n2;++j)
            {
                res[i][j]=((res[i][j-1]&&(s2[j-1]==s3[i+j-1]))||(res[i-1][j]&&(s1[i-1]==s3[i+j-1])));

            }
        }
        return res[n1][n2];
    }
};


https://discuss.leetcode.com/topic/30127/summary-of-solutions-bfs-dfs-dp
还有BFS和DFS解法
