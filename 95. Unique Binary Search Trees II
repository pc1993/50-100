/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)
           return {};       
        return findtree(1,n);
    }
    vector<TreeNode*> findtree(int start,int end)
    {
        vector<TreeNode*> res;
        if(start>end)
        {
            return vector<TreeNode*>(1,NULL);
        }
        for(int i=start;i<=end;++i)
        {
            vector<TreeNode*> l, r;
            l=findtree(start,i-1);
            r=findtree(i+1,end);
            for(int j=0;j<l.size();++j)
            {
                for(int k=0;k<r.size();++k)
                {
                    TreeNode* node = new TreeNode(i);
                    node->left=l[j];
                    node->right=r[k];
                    res.push_back(node);
                }
            }
        }
        return res;
    }
};



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
vector<TreeNode*> generateTrees(int n) {
    if(n==0)
        return {};
    vector<TreeNode*> ret;
    vector<vector<vector<TreeNode*>>> dp(n,vector<vector<TreeNode*>>(n));
    helper(1,n,ret,dp);
    return ret;
}

void helper(int start, int end, vector<TreeNode*> &ret,vector<vector<vector<TreeNode*>>> &dp) {
    if (start > end) {
        ret.push_back(NULL); return;
    }
    if (!dp[start-1][end-1].empty())  {
        ret = dp[start-1][end-1]; return;
    }
    for (int i = start; i <= end; ++i) {
        vector<TreeNode*> left, right;
        helper(start, i-1,left,dp);
        helper(i+1,end,right,dp);
        for(int j = 0; j < left.size(); ++j) {
            for (int k = 0; k < right.size(); ++k) {
                TreeNode* node = new TreeNode(i);
                node->left = left[j];
                node->right = right[k];
                ret.push_back(node);
            }
        }
    }
    dp[start-1][end-1] = ret;
}
};
