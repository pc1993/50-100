思路跟Longest Valid Parentheses类似，主要维护一个栈，这个栈从低向上的高度是依次递增的。
如果遇到当前bar高度比栈顶元素低，那么就出栈直到栈顶元素低于当前bar，出栈过程中检测前面满足条件的矩阵：
如果栈已经为空，说明到目前为止所有元素（当前下标元素除外）都比出栈元素高度要大（否则栈中肯定还有元素），所以矩阵面积就是高度乘以当前下标i。
如果栈不为空，那么就是从当前栈顶元素的下一个到当前下标的元素之间都比出栈元素高度大（因为栈顶元素第一个比当前出栈元素小的），
所以矩阵面积就是高度乘以当前下标i减栈顶元素再减1
在height的最后放入一个较小的数字作为哨兵元素，这样就能保证栈最后为空了
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        heights.push_back(0);
        int n=heights.size();
        int res=0;
        stack<int> skt;
        for(int i=0;i<n;)
        {
            if(skt.empty()||heights[i]>=heights[skt.top()])
            {
                skt.push(i++);
            }
            else
            {
                int h=skt.top();
                skt.pop();
                res=max(res,heights[h]*(skt.empty()?i:i-skt.top()-1));
            }
        }
        return res;
    }
};


 1 class Solution
 2 {
 3 public:
 4     int largestRectangleArea(vector<int> &height)
 5     {
 6         int res = 0;
 7         stack<int> si;
 8         height.push_back(0);
 9         for(int i = 0; i < height.size(); ++ i)
10         {
11             while(!si.empty() && height[si.top()] >= height[i])
12             {
13                 int h = height[si.top()];
14                 si.pop();
15                 
16                 int s = h * (si.empty() ? i : (i - si.top() - 1));
17                 res = max(res, s);
18             }
19             si.push(i);
20         }
21         return res;
22     }
23 };
