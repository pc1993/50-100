/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int n=intervals.size();
        vector<Interval> res;
        for(int i=0;i<n;++i)
        {
            if(intervals[i].end<newInterval.start)
            {
                res.push_back(intervals[i]);
            }
            else if(intervals[i].start>newInterval.end)
            {
                res.push_back(newInterval);
                for(int j=i;j<n;++j)
                {
                    res.push_back(intervals[j]);
                }
                return res;
            }
            else 
            {
                newInterval.start=min(intervals[i].start,newInterval.start);
                newInterval.end=max(intervals[i].end,newInterval.end);
            }
        }
        res.push_back(newInterval);
        return res;        
    }
};



class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        int n = intervals.size(), leftEnd, rightEnd, l, r;
        vector<Interval> res;
        // Find the rightmost interval with start smaller than that of newInterval
        for (l = 0, r = n - 1; l <= r; ) {
            int mid = l + ((r - l) >> 1);
            if (intervals[mid].start > newInterval.start)
                r = mid - 1;
            else l = mid + 1;
        } 
        leftEnd = r;
        // Find the leftmost interval with end larger than that of newInterval
        for (l = 0, r = n - 1; l <= r; ) {
            int mid = l + ((r - l) >> 1);
            if (intervals[mid].end < newInterval.end)
                l = mid + 1;
            else r = mid - 1;
        }
        rightEnd = l;
        // Merge newInterval with intervals[leftEnd] and intervals[rightEnd] if necessary
        if (leftEnd >= 0 && intervals[leftEnd].end >= newInterval.start)
            newInterval.start = intervals[leftEnd--].start;
        if (rightEnd < n && intervals[rightEnd].start <= newInterval.end)
            newInterval.end = intervals[rightEnd++].end;
        // Save the intervals sequentially
        for (int i = 0; i <= leftEnd; i++)
            res.push_back(intervals[i]);
        res.push_back(newInterval);
        for (int i = rightEnd; i < n; i++)
            res.push_back(intervals[i]);
        return res;
    }
};
